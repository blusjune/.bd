#!/usr/bin/python
## bsc.iowa.lsp.cache_perf_sim.py
## LSP: Line-by-line Stream Processing
##
## _ver=20130208_151133


import sys, os, getopt
from collections import defaultdict
from string import punctuation


_this_prog = os.path.basename(sys.argv[0])


##
## processing input parameters
##
_ioc_permill = None # IO contribution (IOC) permill
def print_help_n_exit(_retval):
	print "Usage", _this_prog, "[-h|--help] -c|--ioc-permill=<_ioc_permill>"
	sys.exit(int(_retval))

try:
	opts, args = getopt.getopt(sys.argv[1:], "hc:", ["help", "ioc-permill="])
except getopt.GetoptError:
	print_help_n_exit(1)

for opt, arg in opts:
	if opt in ("-h", "--help"):
		print_help_n_exit(0)
	elif opt in ("-c", "--ioc-permill"):
		_ioc_permill = int(arg)

if _ioc_permill is None:
	print "#>> ERROR: _ioc_permill is not set"
	print_help_n_exit(2)



##
## function definition
##
def hamming_distance(v1, v2):
	assert len(v1) == len(v2)
	return sum(e1 != e2 for e1, e2 in zip(v1, v2))


##
## 1st processing loop
##

_kv_cdst__addr_hit = defaultdict(int)
_kv_list__addr_hit_tstamp = {}
_vtime_count = 0
for line in sys.stdin:
	_addr_curr = int(line.strip())

	## count: address hits
	_kv_cdst__addr_hit[_addr_curr] += 1

	## collect: address hit timestamp
	if _addr_curr not in _kv_list__addr_hit_tstamp:
		_kv_list__addr_hit_tstamp[_addr_curr] = [_vtime_count]
	else:
		_kv_list__addr_hit_tstamp[_addr_curr].append(_vtime_count)

	## update loop variables
	_vtime_count += 1


##
## 2nd processing loop
##
_kv_cdst__addr_hit_interval = defaultdict(int)
for k in _kv_list__addr_hit_tstamp.keys():
	_time_curr = 0
	time_prev = 0
	lc_v = 0
	for v in kv__list__achunk_hit_timestamp[k]:
		time_curr = v
		if lc_v != 0:
			kv__cdst__achunk_rehit_interval[time_curr - time_prev] += 1
		time_prev = time_curr
		lc_v += 1


##
## 3rd processing loop
##
mat = [[0 for i in range(kaddrgrp_count+1)] for j in range(kaddrgrp_count+1)] # kaddrgrp distance matrix
kv__cdst__kag_distance = defaultdict(int)
for ik, iv in kv__list__kaddrgrp.items():
	for jk, jv in kv__list__kaddrgrp.items():
		if (ik != jk):
			mat[ik][jk] = kag_distance(kv__list__kaddrgrp[ik], kv__list__kaddrgrp[jk])
			kv__cdst__kag_distance[mat[ik][jk]] += 1


##
## print the collected and calculated results
##
for kv_key, kv_val in kv__list__achunk_hit_timestamp.items():
	print "__list__achunk_hit_timestamp__ " + str(kv_key) + " : " + str(kv_val)

for kv_key, kv_val in kv__list__kaddrgrp.items():
	print "__list__kaddrgrp__ " + str(kv_key) + " : " + str(kv_val)

for kv_key, kv_val in kv__cdst__achunk_hit.items():
	print "__cdst__achunk_hit__ " + str(kv_key) + " : " + str(kv_val)

for kv_key, kv_val in kv__cdst__achunk_hit_runs.items():
	print "__cdst__achunk_hit_runs__ " + str(kv_key) + " : " + str(kv_val)

for kv_key, kv_val in kv__cdst__achunk_rehit_interval.items():
	print "__cdst__achunk_rehit_interval__ " + str(kv_key) + " : " + str(kv_val)

for kv_key, kv_val in kv__cdst__kag_distance.items():
	print "__cdst__kag_distance__ " + str(kv_key) + " : " + str(kv_val)




