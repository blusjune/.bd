

== 20130329_111903 ==

=== R script file execution from command line ===

$ cat > ex1.R << EOF
 <pre>
library("arules")
data("Epub")
Epub
summary(Epub)
quit(save="no")

## NOTE:
# the last line 'quit(save="no")' is very important
# to avoid the hang-like situation of R
EOF
</pre>

$ R < ex1.R
 <pre>
Job <13833365> is submitted to queue <int>.
<<Waiting for dispatch ...>>
<<Starting on gaura009>>

R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> Loading required package: Matrix
Loading required package: lattice

Attaching package: 'arules'

The following object(s) are masked from 'package:base':

    %in%, write

> > transactions in sparse format with
 15729 transactions (rows) and
 936 items (columns)
> transactions as itemMatrix in sparse format with
 15729 rows (elements/itemsets/transactions) and
 936 columns (items) and a density of 0.001758755 

most frequent items:
doc_11d doc_813 doc_4c6 doc_955 doc_698 (Other) 
    356     329     288     282     245   24393 

element (itemset/transaction) length distribution:
sizes
    1     2     3     4     5     6     7     8     9    10    11    12    13 
11615  2189   854   409   198   121    93    50    42    34    26    12    10 
   14    15    16    17    18    19    20    21    22    23    24    25    26 
   10     6     8     6     5     8     2     2     3     2     3     4     5 
   27    28    30    34    36    38    41    43    52    58 
    1     1     1     2     1     2     1     1     1     1 

   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.000   1.000   1.000   1.646   2.000  58.000 

includes extended item information - examples:
   labels
1 doc_11d
2 doc_13d
3 doc_14c

includes extended transaction information - examples:
      transactionID           TimeStamp
10792  session_4795 2003-01-02 10:59:00
10793  session_4797 2003-01-02 21:46:01
10794  session_479a 2003-01-03 00:50:38
> 
</pre>


=== paste() example ===

* example 1
 <pre>
> 1:6
[1] 1 2 3 4 5 6
> paste(1:6)
[1] "1" "2" "3" "4" "5" "6"
> paste("A", 1:6)
[1] "A 1" "A 2" "A 3" "A 4" "A 5" "A 6"
> paste("A", 1:6, sep="")
[1] "A1" "A2" "A3" "A4" "A5" "A6"
> 2:7
[1] 2 3 4 5 6 7
> seq(8,3,by=-1)
[1] 8 7 6 5 4 3
> paste("A", 1:6, 2:7, seq(8,3,by=-1), sep="")
[1] "A128" "A237" "A346" "A455" "A564" "A673"
> paste("A", 1:6, 2:7, seq(8,3,by=-1), sep="-")
[1] "A-1-2-8" "A-2-3-7" "A-3-4-6" "A-4-5-5" "A-5-6-4" "A-6-7-3"
> paste("A", 1:6, 2:7, seq(8,3,by=-1), sep="/")
[1] "A/1/2/8" "A/2/3/7" "A/3/4/6" "A/4/5/5" "A/5/6/4" "A/6/7/3"
</pre>

* example 2
 <pre>
> stopifnot(identical(str1 <- paste("A", 1:6, sep=""), str2 <- paste0("A", 1:6)))
> str1
[1] "A1" "A2" "A3" "A4" "A5" "A6"
> str2
[1] "A1" "A2" "A3" "A4" "A5" "A6"

> paste("Today is", date())
[1] "Today is Fri Mar 29 11:22:15 2013"
</pre>




== 20130327_183541 ==

=== list() examples ===

 <pre>
> myl = list(apple=1, banana=2, cherry=3, durian=4, elderberry=5)
> myl
$apple
[1] 1

$banana
[1] 2

$cherry
[1] 3

$durian
[1] 4

$elderberry
[1] 5

> myl$apple
[1] 1
> myl$banana
[1] 2
> myl$cherry
[1] 3
> myl$durian
[1] 4
> myl$elderberry
[1] 5
> 
</pre>


=== read-from/save-to a file ===

 <pre>
# create a formatted transaction data
> myd <- paste("apple,banana", "apple", "banana,cherry", "banana,cherry,durian", sep="\n")> cat(myd)
apple,banana
apple
banana,cherry

# write the transaction data to the file
> write(myd, file = "myd_basket_2") 

# read the transaction data from the file, and save it to a variable
> myt <- read.transactions("myd_basket_2", format = "basket", sep=",")

# inspect the transaction variable
> inspect(myt)
  items   
1 {apple, 
   banana}
2 {apple} 
3 {banana,
   cherry}
4 {banana,
   cherry,
   durian}
</pre>




=== clear workspace (delete data) ===

* References
* [https://stat.ethz.ch/pipermail/r-help/2007-August/137694.html Clear Workspace in R]
* [http://stackoverflow.com/questions/11761992/remove-data-from-workspace Advanced method to clear data in R]

* simply, remove three data 'data_1', 'data_2', 'data_3'
 <pre>
rm(data_1, data_2, data_3)
</pre>

* remove all the data searchable by ls()
 <pre>
rm(list = ls())
# 'list' is a name of parameter to be passed into 'rm()' function,
# so it cannot be changed, it should be "list" literally.
</pre>

* remove all objects whose name begins with the string "tmp"
 <pre>
rm(list = ls()[grep("^tmp", ls())])
rm(list = ls(pattern="^tmp"))	# making use of the 'pattern' argument
</pre>

== 20130313_172639 ==


=== SVM example ===

 <pre>
     data(iris)
     attach(iris)
     
     ## classification mode
     # default with factor response:
     model <- svm(Species ~ ., data = iris)
     
     # alternatively the traditional interface:
     x <- subset(iris, select = -Species)
     y <- Species
     model <- svm(x, y) 
     
     print(model)
     summary(model)
     
     # test with train data
     pred <- predict(model, x)
     # (same as:)
     pred <- fitted(model)
     
     # Check accuracy:
     table(pred, y)
     
     # compute decision values and probabilities:
     pred <- predict(model, x, decision.values = TRUE)
     attr(pred, "decision.values")[1:4,]
     
     # visualize (classes by color, SV by crosses):
     plot(cmdscale(dist(iris[,-5])),
          col = as.integer(iris[,5]),
          pch = c("o","+")[1:150 %in% model$index + 1])
</pre>


=== cmdscale (Classical MultiDimensional Scaling) ===

* Description
: Classical multidimensional scaling of a data matrix. (a.k.a. principal coordinates analysis (Gower, 1966)

* Usage
: cmdscale(d, k=2, eig=FALSE, add=FALSE, x.ret=FALSE)

* Arguments
: '''d [mandatory]''': a distance structure such as that returned by 'dist' or a full symmetric matrix containing the dissimilarities
: k [optional]: the maximum dimension of the space which the data are to be represented in; must be in {1, 2, ..., n-1}
: eig [optional]: indicates whether eigenvalues should be returned
: add [optional]: logical indicating if an additive constant c* should be computed, and added to the non-diagonal dissimilarities such that the modified dissimilarities are Euclidean
: x.ret [optional]: indicates whether the doubly centered symmetric distance matrix should be returned

* Details
: Multidimensional scaling takes a set of dissimilarities and returns a set of points such that the distances between the points are approximately equal to the dissimilarities


=== dist (Distance matrix computation) ===

This computes and returns the distance matrix computed by using the specified distance measure to compute the distances between the rows of a data matrix

* Usage
: dist(x, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)

* Arguments
: x
:: a numeric matrix, data frame or 'dist' object
: method
:: the distance measure to be used. this must be one of "euclidean", "maximum", "manhattan", "canberra", "binary", or "minkowski" (any unambiguous substring can be given)
: diag

* Examples (by blusjune)

 <pre>
> mat_a
     [,1] [,2] [,3] [,4]
[1,]    1    1    1    1
[2,]    2    2    2    2
[3,]    3    3    3    3
[4,]    0    0    0    0
> dist(mat_a)
  1 2 3
2 2    
3 4 2  
4 2 4 6
> cmdscale(dist(mat_a))
     [,1]          [,2]
[1,]    1  5.809542e-08
[2,]   -1  3.057654e-09
[3,]   -3  9.172961e-09
[4,]    3 -9.172961e-09
> dist(cmdscale(dist(mat_a)))
  1 2 3
2 2    
3 4 2  
4 2 4 6
</pre>

 <pre>
> mat_b
     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    2    2    2
[3,]    0    0    0
> dist(mat_b)
         1        2
2 1.732051         
3 1.732051 3.464102
> cmdscale(dist(mat_b))
              [,1]         [,2]
[1,]  7.412908e-33 1.564993e-08
[2,] -1.732051e+00 2.477578e-09
[3,]  1.732051e+00 2.477578e-09
> dist(cmdscale(dist(mat_b)))
         1        2
2 1.732051         
3 1.732051 3.464102

> ((1-2)**2 + (1-2)**2 + (1-2)**2) ** 0.5
[1] 1.732051
> ((2-0)**2 + (2-0)**2 + (2-0)**2) ** 0.5
[1] 3.464102
</pre>


== 20130306_185022 ==

=== R package ('e1071') installation from command line ===

: Assumes that already downloaded and unpacked properly the 'e1071_1.6-1.tar.gz' file

 <pre>

1mjjung@secm:[e1071] $ R CMD INSTALL e1071
Job <13412785> is submitted to queue <int>.
<<Waiting for dispatch ...>>
<<Starting on gaura007>>
Warning: invalid package 'e1071'
Error: ERROR: no packages specified




a1mjjung@secm:[e1071] $ cd ..
la1mjjung@secm:[e1071_build] $ l
total 280
drwxrwxr-x 3 a1mjjung X0101   4096 Mar  6 18:44 ./
drwxrwxr-x 3 a1mjjung X0101   4096 Mar  6 18:44 ../
drwxr-xr-x 7 a1mjjung X0101   4096 Mar  6 18:45 e1071/
-rw-r--r-- 1 a1mjjung X0101 258910 Mar  6 18:43 e1071_1.6-1.tar.gz




a1mjjung@secm:[e1071_build] $ R CMD INSTALL e1071
Job <13412786> is submitted to queue <int>.
<<Waiting for dispatch ...>>
<<Starting on gaura010>>
* installing to library '/home/X0101/a1mjjung/R/x86_64-unknown-linux-gnu-library/2.15'
* installing *source* package 'e1071' ...
** package 'e1071' successfully unpacked and MD5 sums checked
checking for C++ compiler default output file name... a.out
checking whether the C++ compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables... 
checking for suffix of object files... o
checking whether we are using the GNU C++ compiler... yes
checking whether g++ accepts -g... yes
** libs
gcc -I/apps/R_project/R-2.15.2/lib64/R/include -DNDEBUG  -I/usr/local/include    -fpic  -std=gnu99 -g -O2 -fopenmp -m64 -I/apps/intel/ComposerXE/composerxe-2011.5.220/mkl/include  -c Rsvm.c -o Rsvm.o
gcc -I/apps/R_project/R-2.15.2/lib64/R/include -DNDEBUG  -I/usr/local/include    -fpic  -std=gnu99 -g -O2 -fopenmp -m64 -I/apps/intel/ComposerXE/composerxe-2011.5.220/mkl/include  -c cmeans.c -o cmeans.o
gcc -I/apps/R_project/R-2.15.2/lib64/R/include -DNDEBUG  -I/usr/local/include    -fpic  -std=gnu99 -g -O2 -fopenmp -m64 -I/apps/intel/ComposerXE/composerxe-2011.5.220/mkl/include  -c cshell.c -o cshell.o
gcc -I/apps/R_project/R-2.15.2/lib64/R/include -DNDEBUG  -I/usr/local/include    -fpic  -std=gnu99 -g -O2 -fopenmp -m64 -I/apps/intel/ComposerXE/composerxe-2011.5.220/mkl/include  -c floyd.c -o floyd.o
g++ -I/apps/R_project/R-2.15.2/lib64/R/include -DNDEBUG  -I/usr/local/include    -fpic  -g -O2 -fopenmp -m64 -I/apps/intel/ComposerXE/composerxe-2011.5.220/mkl/include  -c svm.cpp -o svm.o
g++ -shared -L/usr/local/lib64 -o e1071.so Rsvm.o cmeans.o cshell.o floyd.o svm.o
installing to /home/X0101/a1mjjung/R/x86_64-unknown-linux-gnu-library/2.15/e1071/libs
** R
** inst
** preparing package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
   'svmdoc.Rnw' 
** testing if installed package can be loaded

* DONE (e1071)




a1mjjung@secm:[e1071_build] $ R
Job <13412787> is submitted to queue <int>.
<<Waiting for dispatch ...>>
<<Starting on gaura010>>

R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ?svm
No documentation for 'svm' in specified packages and libraries:
you could try '??svm'
> library(e1071) 
Loading required package: class
> ?svm
> 
Save workspace image? [y/n/c]: y




a1mjjung@secm:[e1071_build] $ pwd
/home/X0101/a1mjjung/x/R/e1071_build

a1mjjung@secm:[e1071_build] $ ls -alF
total 284
drwxrwxr-x 3 a1mjjung X0101   4096 Mar  6 18:47 ./
drwxrwxr-x 3 a1mjjung X0101   4096 Mar  6 18:44 ../
-rw------- 1 a1mjjung X0101     25 Mar  6 18:47 .Rhistory
drwxr-xr-x 7 a1mjjung X0101   4096 Mar  6 18:46 e1071/
-rw-r--r-- 1 a1mjjung X0101 258910 Mar  6 18:43 e1071_1.6-1.tar.gz

</pre>



== 20130304_190007 ==



=== test type of some object ===

 <pre>
> x <- scan("/tmp/scan.txt", what=list(NULL, name=character()))
> x <- x[sapply(x, length) > 0]
> is.vector(x)


> x = mat.or.vec(100,1)
> if (is.integer(x) == TRUE) { print ("YES") } else { print ("NO") }
[1] "NO"
> if (is.vector(x) == TRUE) { print ("YES, vector") } else { print ("NO, NOT vector") }
[1] "YES, vector"
</pre>




=== Data import (load data from a file) ===

* scan()
 <pre>
 > x1 <- scan("/etc/hosts", what=character())

 > x1     
 [1] "127.0.0.1"       "localhost"       "#127.0.1.1"      "stones"         
 [5] "#"               "The"             "following"       "lines"          
 [9] "are"             "desirable"       "for"             "IPv6"           
[13] "capable"         "hosts"           "::1"             "ip6-localhost"  
[17] "ip6-loopback"    "fe00::0"         "ip6-localnet"    "ff00::0"        
[21] "ip6-mcastprefix" "ff02::1"         "ip6-allnodes"    "ff02::2"        
[25] "ip6-allrouters"  "10.0.2.15"       "stones-eth0"     "#192.168.1.109" 
[29] "stones"          "hd-master-01"    "#192.168.1.110"  "pavement"       
[33] "hd-slave-0001"   "192.168.1.112"   "stones"          "hd-master-01"   
[37] "hd-slave-0001"   "kandinsky"       "192.168.1.110"   "pavement"       
[41] "hd-slave-0002"  
</pre>

* read.table()
 <pre>
> iot_r <- read.table('tracelog.msn_filesrvr.R')  
</pre>



=== function defintion, for loop in R ===

 <pre>
> avg_smoothing <- function(src, srcl, sf) {
    tgtl = srcl + 1 - sf
    tgt <- mat.or.vec(tgtl, 1)
    for (i in 1:tgtl) {
        tgt[i] = mean(src[i:(i+sf-1)])
    }
    return (tgt)
}

> vec1 <- rnorm(100, mean=10, sd=1)
> vec1_sf2 <- avg_smoothing(vec1, 100, 2)
> vec1_sf4 <- avg_smoothing(vec1, 100, 4)
> vec1_sf8 <- avg_smoothing(vec1, 100, 8)

> plot(vec1, col="gray", type="l")
> points(vec1_sf2, col="red", type="l")
> points(vec1_sf4, col="blue", type="l")
> points(vec1_sf8, col="green", type="l")
</pre>




== 20130127_225539 ==

=== R Installation ===

* to install R statistical computing software
** me@matrix$ sudo apt-get install r-base

* to start R from command line, just type 'R' in your terminal
** me@matrix$ R

* RStudio download [http://www.rstudio.com/ide/download/]
** RStudio Desktop [http://www.rstudio.com/ide/download/desktop]
**: If you run R on your desktop
** RStudio Server [http://www.rstudio.com/ide/download/server]
**: If you run R on a Linux server and want to enable users to remotely access RStudio using a web browser
*** RStudio Server Getting Started [http://www.rstudio.com/ide/docs/server/getting_started]

 <pre>
sudo apt-get install r-base
wget http://download2.rstudio.org/rstudio-server-0.97.312-amd64.deb
sudo gdebi rstudio-server-0.97.312-amd64.deb 
bsc.adm.create_me
google-chrome http://kandinsky:8787 # type ID/PW (me?!)
</pre>


* Debian Packages of R Software [http://cran.r-project.org/bin/linux/debian/README.html]

=== R Guide/Tutorial/Example ===

* R Tutorial [http://www.r-tutor.com/]
** R Tutorial:: Data Import [http://www.r-tutor.com/r-introduction/data-frame/data-import]


* Example R scripts [http://people.eng.unimelb.edu.au/aturpin/R/index.html]]


* R by example [http://www.mayin.org/ajayshah/KB/R/index.html]


* R example:: Kmeans [http://stat.ethz.ch/R-manual/R-patched/library/stats/html/kmeans.html]


* R package install howto
; e1071
: Misc Functions of the Department of Statistics (e1071), TU Wien
:* package-installation and loading
 install.packages("e1071") # installing the package 'e1071'
 library("e1071") # loading the installed package 'e1071'


* Importing SAS, SPSS and Stata files into R [http://staff.washington.edu/glynn/r_import.pdf]


=== R Troubleshooting ===

* Problems importing csv file/converting from integer to double in R [http://stackoverflow.com/questions/8381839/problems-importing-csv-file-converting-from-integer-to-double-in-r]


=== Misc. ===

* WEKA Tutorial [http://www.cs.utexas.edu/users/ml/tutorials/Weka-tut/]
* weka is a metric prefix for 10^30
