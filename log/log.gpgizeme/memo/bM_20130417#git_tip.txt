== 20140820_000757

 <pre>
git-center$ cd ~blusjune; mkdir .._; mv .b .bd .._;
git-center$ cd /x; ln -s ~blusjune/.._;
git-center$ cd .._; cd .bd; mv .git .git.foo; # to force .bd/ to be included in .._ git; otherwise, .bd/ will not be included in .._ by 'git add -A' due to existence of '.git/' directory in .bd/;
git-center$ cd ..; git init;
git-center$ git add -A; git commit -a;
git-center$ git branch; git log; git shortlog; git blame .b/..__Brian_M_JUNG__;

git-london$ mkdir /x/gitwork; cd /x/gitwork;
git-london$ git clone blusjune@git-center:/x/.._;
git-london$ cd .._; git branch -m master current; git branch;
git-london$ vi .b/..__Brian_M_JUNG__; git add -A; git commit -a;
git-london$ git push --all -u;

git-center$ git branch; git merge current; # merge the current commit from london into the master

git-paris$ mkdir /x/gitwork; cd /x/gitwork;
git-paris$ git clone blusjune@git-center:/x/.._;
git-paris$ cd .._; git branch -m master current; git branch;
git-paris$ vi .b/..__Brian_M_JUNG__; git add -A; git commit -a;
git-paris$ git push --all -u;

git-center$ git branch; git merge current; # merge the current commit from paris into the master
</pre>


== 20130716_003459 ==

=== start my new branch 'bsos-v0.0.1' from existing 'v3.9.9' version ===

 <pre>
  # list all the tags
$ git tag -l 
...
v3.8.6
v3.8.7
v3.8.8
v3.8.9
v3.9
v3.9-rc1
v3.9-rc2
v3.9-rc3
v3.9-rc4
v3.9-rc5
v3.9-rc6
v3.9-rc7
v3.9-rc8
v3.9.1
v3.9.10
v3.9.2
v3.9.3
v3.9.4
v3.9.5
v3.9.6
v3.9.7
v3.9.8
v3.9.9

$ git branch
* master
$ git branch --list
* master

  # create a new branch 'bsos-v0.0.1'
  # from 'v3.9.9' as a starting point
$ git branch bsos-v0.0.1 v3.9.9

  # check the branch status
$ git branch --list
  bsos-v0.0.1
* master

  # change branch 
$ git checkout bsos-v0.0.1 
Switched to branch 'bsos-v0.0.1'

  # check the branch status
$ git branch --list
* bsos-v0.0.1
  master

  # create a new file, add, and commit
$ tstamp > README.bsos-v0.0.1
$ git add -A
$ git commit -a

</pre>




== 20130417_001521 ==

=== Git on the Server - Setting Up the Server ===


* Reference
: [http://git-scm.com/book/ch4-4.html 4.4 Git on the Server - Setting Up the Server // git-scm.com]


* 4.4 Git on the Server - Setting Up the Server
''' Setting Up the Server '''

: Let's walk through setting up SSH access on the server side. In this example, you'll use the authorized_keys method for authenticating your users. We also assume you're running a standard Linux distribution like Ubuntu. First, you create a 'git' user and a .ssh directory for that user.

 <pre>
$ sudo adduser git
$ su git
$ cd
$ mkdir .ssh
</pre>

: Next, you need to add some developer SSH public keys to the authorized_keys file for that user. Let's assume you've received a few keys by e-mail and saved them to temporary files. Again, the public keys look something like this:

 <pre>
$ cat /tmp/id_rsa.john.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
dAv8JggJICUvax2T9va5 gsg-keypair
</pre>

: You just append them to your authorized_keys file:

 <pre>
$ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
</pre>

: Now, you can set up an empty repository for them by running git init with the --bare option, which initializes the repository without a working directory:

 <pre>
$ cd /opt/git
$ mkdir project.git
$ cd project.git
$ git --bare init
</pre>

: Then, John, Josie, or Jessica can push the first version of their project into that repository by adding it as a remote and pushing up a branch. Note that someone must shell onto the machine and create a bare repository every time you want to add a project. Let's use gitserver as the hostname of the server on which you've set up your 'git' user and repository. If you're running it internally, and you set up DNS for gitserver to point to that server, then you can use the commands pretty much as is:

 <pre>
# on Johns computer
$ cd myproject
$ git init
$ git add .
$ git commit -m 'initial commit'
$ git remote add origin git@gitserver:/opt/git/project.git
$ git push origin master
</pre>

At this point, the others can clone it down and push changes back up just as easily:

 <pre>
$ git clone git@gitserver:/opt/git/project.git
$ cd project
$ vim README
$ git commit -am 'fix for the README file'
$ git push origin master
</pre>

: With this method, you can quickly get a read/write Git server up and running for a handful of developers.

: As an extra precaution, you can easily restrict the 'git' user to only doing Git activities with a limited shell tool called git-shell that comes with Git. If you set this as your 'git' user's login shell, then the 'git' user cannot have normal shell access to your server. To use this, specify git-shell instead of bash or csh for your user's login shell. To do so, you will likely have to edit your /etc/passwd file:

 <pre>
$ sudo vim /etc/passwd
</pre>

: At the bottom, you should find a line that looks something like this:

 <pre>
git:x:1000:1000::/home/git:/bin/sh
</pre>

: Change /bin/sh to /usr/bin/git-shell (or run which git-shell to see where itâ€™s installed). The line should look something like this:

 <pre>
git:x:1000:1000::/home/git:/usr/bin/git-shell
</pre>

Now, the 'git' user can only use the SSH connection to push and pull Git repositories and cannot shell onto the machine. If you try, you will see a login rejection like this:

 <pre>
$ ssh git@gitserver
fatal: What do you think I am? A shell?
Connection to gitserver closed.
</pre>




