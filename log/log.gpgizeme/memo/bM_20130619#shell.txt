
== 20130816_182819 ==

=== Bash getopt versus getopts ===

* http://blog.onetechnical.com/2012/07/16/bash-getopt-versus-getopts/
: I recently reviewed someone's bash code, and noted their use of getopt. I had always been using getopts, so was at first confused (due to syntax), then puzzled: which one is better, getopt or getopts?
Getopt is older, but is a separate binary. It tends to be pretty robust, and supports long options (i.e., you can use -foo instead of just single letter options like -f). Getopt will also re-arrange the parameters.
Getopts is newer but built into the shell. Its syntax tends to be simpler to use.
Let's see some quick examples of usage:

* 'getopt' example
 <pre>
#!/bin/bash

# getopt.sh example

# Execute getopt
ARGS=$(getopt -o a:b:c -l "ay:,bee:,cee" -n "getopt.sh" -- "$@");

#Bad arguments
if [ $? -ne 0 ];
then
  exit 1
fi

eval set -- "$ARGS";

while true; do
  case "$1" in
    -a|--ay)
      shift;
      if [ -n "$1" ]; then
        echo "-a used: $1";
        shift;
      fi
      ;;
    -b|--bee)
      shift;
      if [ -n "$1" ]; then
        echo "-b used: $1";
        shift;
      fi
      ;;
    -c|--cee)
      shift;
      echo "-c used";
      ;;
    --)
      shift;
      break;
      ;;
  esac
done
</pre>

* 'getopts' example
 <pre>
#!/bin/bash

# getopts example

while getopts a:b:c flag; do
  case $flag in
    a)
      echo "-a used: $OPTARG";
      ;;
    b)
      echo "-b used: $OPTARG";
      ;;
    c)
      echo "-c used";
      ;;
    ?)
      exit;
      ;;
  esac
done

shift $(( OPTIND - 1 ));
</pre>

* Execution results of 'getopt' version vs. 'getopts' version
 <pre>

$ ./getopt.sh -a "opt a" -b opt_b arg1
-a used: opt a
-b used: opt_b
-c used
$ ./getopts.sh -a "opt a" -b opt_b arg1
-a used: opt a
-b used: opt_b
-c used
$

</pre>



== 20130619_004011 ==

=== one-dimentional indexed and associative array in /bin/bash (not in /bin/sh) ===

 <pre>
#!/bin/bash


#__________________________________________________________________________________________________________
# 0    | 1  | 2   | 3    | 4           | 5           | 6    | 7         | 8    | 9      | 10
#__________________________________________________________________________________________________________
# time |mwid| R/W | RnSq | ioaddr      | seekdist    | iosz | pname     | pid  | diskid | fname
#__________________________________________________________________________________________________________
# 1847 | 0  |  Rd | Rand | 42399211520 | 42399211520 | 4096 | xperf.exe | 6856 | 0      | C_/pagefile.sys
#

declare -A _ioptn_fld;
_ioptn_fld=(
[pname]="7" \
[fname]="10" \
[iotype]="2,3" \
[iorw]="2" \
[iornsq]="3" \
[ioaddr]="4" \
[iosize]="6" \
[iotype_iosize]="2,3,6" \
[pname_fname]="7,10" \
[pname_iotype]="7,2,3" \
[pname_iosize]="7,6" \
[pname_iotype_iosize]="7,2,3,6" \
[fname_iotype]="10,2,3" \
[fname_iosize]="10,6" \
[fname_iotype_iosize]="10,2,3,6" \
[pname_fname_iotype_iosize]="7,10,2,3,6" \
);


_gen_tseries()
{
        # '_target' variable SHOULD be set properly
        if [ "X$_target" != "X" ]; then
                _fld=${_ioptn_fld[$_target]};
                _fo=${_ioptn_tseries}.${_target};
                echo "#>> generating time-series data: $_target";
                cat $_iotrc_pp_log | bsc.iowa.lsp.anal_s20130618v01 -f $_fld > $_fo;
        else
                echo "ERROR: '_target' variable SHOULD be set properly -- EXIT";
        fi
}

_target="pname"; _gen_tseries;
_target="fname"; _gen_tseries;
_target="iotype"; _gen_tseries;
_target="iorw"; _gen_tseries;
_target="iornsq"; _gen_tseries;
_target="ioaddr"; _gen_tseries;
_target="iosize"; _gen_tseries;
_target="iotype_iosize"; _gen_tseries;
_target="pname_fname"; _gen_tseries;
_target="pname_iotype"; _gen_tseries;
_target="pname_iosize"; _gen_tseries;
_target="pname_iotype_iosize"; _gen_tseries;
_target="fname_iotype"; _gen_tseries;
_target="fname_iosize"; _gen_tseries;
_target="fname_iotype_iosize"; _gen_tseries;
_target="pname_fname_iotype_iosize"; _gen_tseries;


</pre>


