


== 20130716_094441 ==


=== Basic statistics with gnuplot ===

* http://www.phyast.pitt.edu/~zov1/gnuplot/html/statistics.html ((B.GOOD))




* Determining the minimum, maximum, and the mean
: The first thing we will do is to plot the mean, minimum and maximum of a data set. This can easily done in the following way.
: At the beginning of our script, we just produce some dummy data, and call a dummy plot.  This plot does nothing but fills in the values of the minimum and maximum of the data set. Then we fit a constant function. You can convince yourself that this returns the average of the data set.
: In the plotting section, we produce three labels, that tell us something about the data set, and plot the data range with shaded region. Easy enough, and in just a couple of lines, we created this figure
 <pre>
reset
# Produce some dummy data
set sample 200
set table 'stats2.dat'
plot [0:10] 0.5+rand(0)
unset table

set yrange [0:2]
unset key

# Retrieve statistical properties
plot 'stats2.dat' u 1:2
min_y = GPVAL_DATA_Y_MIN
max_y = GPVAL_DATA_Y_MAX

f(x) = mean_y
fit f(x) 'stats2.dat' u 1:2 via mean_y

# Plotting the minimum and maximum ranges with a shaded background
set label 1 gprintf("Minimum = %g", min_y) at 2, min_y-0.2
set label 2 gprintf("Maximum = %g", max_y) at 2, max_y+0.2
set label 3 gprintf("Mean = %g", mean_y) at 2, max_y+0.35
plot min_y with filledcurves y1=mean_y lt 1 lc rgb "#bbbbdd", \
max_y with filledcurves y1=mean_y lt 1 lc rgb "#bbddbb", \
'stats2.dat' u 1:2 w p pt 7 lt 1 ps 1
</pre>




* Calculating the standard deviation
: Now, what should we do, if we were to calculate the standard deviation? We have already learnt how to calculate the average, so we will use that. Here is the script:
 <pre>
reset
set sample 200
set table 'stats2.dat'
plot [0:10] 0.5+rand(0)
unset table

set yrange [0:2]
unset key
f(x) = mean_y
fit f(x) 'stats2.dat' u 1:2 via mean_y

stddev_y = sqrt(FIT_WSSR / (FIT_NDF + 1 ))

# Plotting the range of standard deviation with a shaded background
set label 1 gprintf("Mean = %g", mean_y) at 2, min_y-0.2
set label 2 gprintf("Standard deviation = %g", stddev_y) at 2, min_y-0.35
plot mean_y-stddev_y with filledcurves y1=mean_y lt 1 lc rgb "#bbbbdd", \
mean_y+stddev_y with filledcurves y1=mean_y lt 1 lc rgb "#bbbbdd", \
mean_y w l lt 3, 'stats2.dat' u 1:2 w p pt 7 lt 1 ps 1
</pre>




* Removing points based on the standard deviation
: Incidentally, this can also be used for removing points that are very far from the mean. The following script takes out those data that are more than one standard deviation away from the mean.
: Only the last line is relevant: we use the ternary operator to decide whether we want to keep the point: if the deviation from the mean is less, than the standard deviation, we hold on to our data, otherwise, we replace it by 1/0, which is undefined, and gnuplot quietly ignores it. If you want to learn more about the working of the ternary operator, check out section on ... plotting an inequality.
 <pre>
reset
set sample 200
set table 'stats2.dat'
plot [0:10] 0.5+rand(0)
unset table

set yrange [0:2]
unset key
f(x) = mean_y
fit f(x) 'stats2.dat' u 1:2 via mean_y

stddev_y = sqrt(FIT_WSSR / (FIT_NDF + 1 ))

# Removing points based on the standard deviation
set label 1 gprintf("Mean = %g", mean_y) at 2, min_y-0.15
set label 2 gprintf("Sigma = %g", stddev_y) at 2, min_y-0.3
plot mean_y w l lt 3, mean_y+stddev_y w l lt 3, mean_y-stddev_y w l lt 3, \
'stats2.dat' u 1:(abs($2-mean_y) < stddev_y ? $2 : 1/0) w p pt 7 lt 1 ps 1
</pre>




* Determining the position of the minimum and maximum
: We have, thus, already found simple solutions for three of the problems addressed in the patch. What about the third one, adding arrows to the plot at the position of the minimum or maximum, say. We can do that, too.
: First, we retrieve the values of the minimum and the maximum by using a dummy plot. Having done that, we retrieve the positions of the minimum and maximum, by calling a dummy plot on the columns
 plot 'stats1.dat' u ($2 == min_y ? $2 : 1/0):1
: What this line does is substitute min_y, when the second column (whose minimum we extracted before) is equal to the minimum, and an undefined value, 1/0, otherwise. The minimum of this plot is nothing, but the x position of the first minimum. Likewise, had we assigned
 min_pos_x = GPVAL_DATA_Y_MAX
: that would have given the position of the last minimum of the data file. Obviously, these distinctions make sense only, if there are more than one minimum or maximum. Knowing the x and y positions of the minimum and maximum, we can easily set the arrows.
 <pre>
reset
set sample 50
set table 'stats1.dat'
plot [0:10] 0.5+rand(0)
unset table

set yrange [0:2]
unset key
plot 'stats1.dat' u 1:2
min_y = GPVAL_DATA_Y_MIN
max_y = GPVAL_DATA_Y_MAX

plot 'stats1.dat' u ($2 == min_y ? $2 : 1/0):1
min_pos_x = GPVAL_DATA_Y_MIN
plot 'stats1.dat' u ($2 == max_y ? $2 : 1/0):1
max_pos_x = GPVAL_DATA_Y_MAX

# Automatically adding an arrow at a position that depends on the min/max
set arrow 1 from min_pos_x, min_y-0.2 to min_pos_x, min_y-0.02 lw 0.5
set arrow 2 from max_pos_x, max_y+0.2 to max_pos_x, max_y+0.02 lw 0.5
set label 1 'Minimum' at min_pos_x, min_y-0.3 centre
set label 2 'Maximum' at max_pos_x, max_y+0.3 centre
plot 'stats1.dat' u 1:2 w p pt 6
</pre>




=== Data manipulation in Gnuplot ===

It is not necessary to pre-process data prior to plotting with gnuplot -- simple manipulations can be done by gnuplot at the time of plotting.

* http://chemistry.osu.edu/~foster.281/gnuplot/gnuplot_tutorial3_files/gp_manip.html
: Data manipulation in Gnuplot

* taking the natural Log, ln(x)
 gnuplot> plot 'example1.txt' using 1:(log($2))

* taking the base-10 Log, log10(x)
 gnuplot> plot 'example1.txt' using 1:(log10($2))

* A wide range of mathematical operations are available in Gnuplot. Try:
 gnuplot> help expressions

* Add a constant to the ln of the y data:
 gnuplot> plot 'example1.txt' using 1:(log($2)+10)

* Multiply the y-data by a constant before taking the ln
 gnuplot> plot 'example1.txt' using 1:(log($2*10))

* Add a constant to the x-axis:
 gnuplot> plot 'example1.txt' using ($1+100):(log($2))

* Operate on two columns at once:
 gnuplot> plot 'example1.txt' using 1:($3+$4) w linesp

* Evaluate a function at each x-value
 gnuplot> plot 'example1.txt' using 1:(sin($1)) w linesp

* Plotting residuals
: One of the best uses of the in-line data manipulation function in Gnuplot is in comparing exponential data with the results of curve fitting
 <pre>
gnuplot> plot 'p7_8.txt'
gnuplot> f(x) = a*exp(-k*x)
gnuplot> fit f(x) 'p7_8.txt' via a,k
gnuplot> replot f(x)
gnuplot> plot 'p7_8.txt' using 1:($2 - f($1)) w impulse lw 3
</pre>

: It should be evident from this plot that the residuals differ SYSTEMATICALLY from the experimental data. This systematic deviation of the residuals is diagnostic for improper data modeling (that is, the equation used to fit the data is not appropriate).
: Let's use the proper function
 <pre>
gnuplot> plot 'p7_8.txt'
gnuplot> f(x) = a/(a*k*x+1)
gnuplot> fit f(x) 'p7_8.txt' via a,k
gnuplot> replot f(x)
gnuplot> plot 'p7_8.txt' using 1:($2 - f($1)) w impulse lw 3
</pre>




== 20130709_022648 ==

=== good reference URL ===

* http://gnuplot.sourceforge.net/demo/histograms.html
: gnuplot demo script: histograms.dem ((B.GOOD))




=== conditional coloring ===

* http://stackoverflow.com/questions/14993538/using-gnuplot-to-plot-point-colors-conditionally
: Using Gnuplot to plot point colors conditionally

 <pre>
#!/usr/bin/env gnuplot

set terminal png set output 'test.png';

bigx = 16; bigy = 400; bigz = 65;

isbig(x,y,z) = (x > bigx || y > bigy || z > bigz) ? 1 : 0;

set palette defined (0 0.5 0.5 0.5, 1 1 0 0) # (grey, red);

unset colorbox;
set xrange [0:20]; set yrange [0:500]; set zrange [0:100];

splot 'data.dat' using 2:1:3:(isbig($2,$1,$3)) with points pt 7 palette notitle, \
      '' using (1e6):1:1 with points pt 7 lc rgb '#888888' title 'in box', \
      '' using (1e6):1:1 with points pt 7 lc rgb 'red' title 'not in box';

</pre>




=== rotate xtics by -90 degree ===

 <pre>
gnuplot>
	set xtics rotate by -90;
	plot "< tail -10 ./cdist.iotype_iosz" u 1:xticlabels(2) w hist;

gnuplot>
	set autoscale;
	set xtics rotate by -40;
	plot '< tail -20 ./cdist.iotype_iosz' u (log10($1)):xticlabels(2) w hist;
	plot '< tail -20 ./cdist.iotype_iosz' u (($1)):xticlabels(2) w hist;

</pre>




=== plot using only part of a file ===

: I have data in some text file which has let's say 10000 rows and 2 columns. I know that I can plot it easily by plot "filename.txt" using 1:2 with lines . What I want is however just plotting let's say the rows from 1000 to 2000 or any other reasonable selection. Is it possible to do that easily?

 <pre>
plot "<(sed -n '1000,2000p' filename.txt)" using 1:2 with lines
</pre>


=== simple function or calculation in 'plot' command ===

* outermost '(' and ')' should exist to use calculation or function in 'plot' command!

 <pre>
gnuplot>
	max = 2082;
	set autoscale;
	set title "IO intensity (system IO)";
	plot './cdist.hitc_mwid' u 2:(log10($1/max)/log10(max)) w p ps .5 pt 1;
</pre>




== 20130621_180550 ==

=== Set grid lines ===

* http://www.gnuplotting.org/tag/grid/

 <pre>
set mxtics; set mytics; 
set style line 12 lc rgb '#ff4400' lt 1 lw 1.5;
set style line 13 lc rgb '#00ccff' lt 1 lw 0.5;
set grid xtics mxtics ytics mytics back ls 12, ls 13
</pre>




== 20130619_220331 ==

=== Saving gnuplot history to a file ===

 <pre>
gnuplot> history
gnuplot> history ".gnuplot.hist"
</pre>




=== label x-axis with strings from data file ===

* http://www.linuxquestions.org/questions/linux-software-2/gnuplot-how-to-label-x-axis-with-strings-from-data-file-462635/
: First approach ((B.GOOD))
 <pre>
$ cat myfile.txt
dogs 3
cats 2
monkeys 10

gnuplot> plot "./myfile.txt" u 2:xticlabels(1)
</pre>


* http://objectmix.com/graphics/140196-gnuplot-string-data.html 
: Second approach ((B.GOOD))
 <pre>
# columns 1,2,3 contain x coord, y coord, string
plot 'file' using 1:2:3 with labels

# implicit x coord, y in column 2, string in column 3
plot 'file' using 0:2:3 with labels

# implicit x coord, y in column 1, string in column 2
plot 'file' using 0:1:2 with labels
</pre>




== 20130524_102158 ==

=== set palette model and color map legend; calculation inside plot command  ===
 <pre>
set palette model RGB defined (0 "red", 1 "blue")
plot "./timediff.log" u 1 w impulses, "./cpu_id.log" u (1000 * $1) w p pt 2 palette;

set palette model RGB defined (0 "red", 1 "violet", 2 "blue")
plot "./timediff.log" u 1 w impulses, "./cpu_id.log" u (1000 * $1) w p pt 2 palette;
</pre>




== 20130502_202615 ==

=== using splot (3D plot) ===
 <pre>
set title "I/O intensiveness per measurement window (10-min)";
set xlabel "time (10-minute)";
set ylabel "address (LBA)";
set zlabel "hit count per addr";
show view;
#set view 45, 60;
#set view 70, 80;
set view 0, 0;
show view;
splot '../data.out/20130502_134226--f010.T021.msnfs.R.out--iowa_anal_s0010.sio_25.mw_600000000.t1_60000000/\
f040.msnfs.anal_s0010.__list__iomw_acs_cnt_per_addr__.out.for_gnuplot' \
u 3:2:1 with points palette pointsize 2 pointtype 7;
</pre>




== 20130401_202220 ==

=== set xrange, yrange ===
 <pre>
Create a title:                  > set title "Force-Deflection Data" 
Put a label on the x-axis:       > set xlabel "Deflection (meters)"
Put a label on the y-axis:       > set ylabel "Force (kN)"
Change the x-axis range:         > set xrange [0.001:0.005]
Change the y-axis range:         > set yrange [20:500]
Have Gnuplot determine ranges:   > set autoscale
Move the key:                    > set key 0.01,100
Delete the key:                  > unset key
Put a label on the plot:         > set label "yield point" at 0.003, 260 
Remove all labels:               > unset label
Plot using log-axes:             > set logscale
Plot using log-axes on y-axis:   > unset logscale; set logscale y 
Change the tic-marks:            > set xtics (0.002,0.004,0.006,0.008)
Return to the default tics:      > unset xtics; set xtics auto
</pre>




== 20121115_004913 ==
=== set xrange, yrange inside plot command ===
 <pre>
set title "[ Address Access Pattern ]"
plot [-1000:1000] [0:2000]  "./ifreq__seek_d2d_c.log" using 1:3 with points;
</pre>




== 20130227_221739 ==
=== overlay two graphs in a single plot ===
 <pre>
plot "./tracelog.fileserver.R.addr" u 2 w points, "./tracelog.fileserver.W.addr" u 2 w points;
</pre>




